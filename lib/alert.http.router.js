'use strict';


/**
 * @apiDefine Alert  Alert
 *
 * @apiDescription A representation of an entity which provides(or receives)
 * disaster notifications to(or from) source(s).
 *
 * A disaster alert is generated by a specific situation. The main features of an
 * alert is that it is not predictable and it is not a recurrent data. That
 * means that an alert could be an accident or a high level of pollutants
 * measure.
 *
 * @author Benson Maruchu <benmaruchu@gmail.com>
 * @author lally elias <lallyelias87@gmail.com>
 * @license MIT
 * @since  0.1.0
 * @version 1.0.0
 * @public
 */


/**
 * @apiDefine Alert
 * @apiSuccess {String} _id Unique alert identifier
 * @apiSuccess {String} source Human readable name of authority(or party) issuing the alert
 * e.g TMA etc.
 * @apiSuccess {Date} [issuedAt] Date and time the alert was issued by the alert
 * source(or generator) e.g 2018-07-28 23:53:19 etc.
 * @apiSuccess {String} title Human readable title of the alert.
 * e.g Heavy Rain etc.
 * @apiSuccess {String} [description] Brief human readable details about alert.
 * @apiSuccess {String} severity Human readable severity(level of gravity) of the alert
 * e.g Informational, Critical etc.
 * @apiSuccess {String} direction Human readable direction(received or given) of the alert
 * i.e Inbound or Outbound.
 * @apiSuccess {Date} createdAt Date when alert was created.
 * @apiSuccess {Date} updatedAt Date when alert was last updated.
 *
 */


/**
 * @apiDefine Alerts
 * @apiSuccess {String} data._id Unique alert identifier
 * @apiSuccess {String} source Human readable name of authority(or party) issuing the alert
 * e.g TMA etc.
 * @apiSuccess {Date} [data.issuedAt] Date and time the alert was issued by the alert
 * source(or generator) e.g 2018-07-28 23:53:19 etc.
 * @apiSuccess {String} data.title Human readable title of the alert.
 * e.g Heavy Rain etc.
 * @apiSuccess {String} [data.description] Brief human readable details about
 * alert.
 * @apiSuccess {String} data.severity Human readable severity(level of gravity)
 * of the alert e.g Informational, Critical etc.
 * @apiSuccess {String} data.direction Human readable direction(received or given)
 * of the alert i.e Inbound or Outbound.
 * @apiSuccess {Date} data.createdAt Date when alert was created.
 * @apiSuccess {Date} data.updatedAt Date when alert was last updated.
 * @apiSuccess {Number} total Total number of status
 * @apiSuccess {Number} size Number of status returned
 * @apiSuccess {Number} limit Query limit used
 * @apiSuccess {Number} skip Query skip/offset used
 * @apiSuccess {Number} page Page number
 * @apiSuccess {Number} pages Total number of pages
 * @apiSuccess {Date} lastModified Date and time at which latest status
 * was last modified
 *
 */


/**
 * @apiDefine AlertSuccessResponse
 * @apiSuccessExample {json} Success-Response:
 *  {
 *    "_id": "5aeed5f37e422f2743b97eb0",
 *    "source": "TMA",
 *    "title": "Heavy Rainfall",
 *    "severity": "Informational",
 *    "createdAt": "2018-05-06T10:16:19.230Z",
 *    "updatedAt": "2018-05-06T10:16:19.230Z"
 *  }
 */


/**
 * @apiDefine AlertsSuccessResponse
 * @apiSuccessExample {json} Success-Response:
 *  {
 *    "data": [
 *    {
 *      "_id": "5aeed5f37e422f2743b97eb0",
 *      "source": "TMA",
 *      "title": "Heavy Rainfall",
 *      "severity": "Informational",
 *      "createdAt": "2018-05-06T10:16:19.230Z",
 *      "updatedAt": "2018-05-06T10:16:19.230Z"
 *     }
 *    ],
 *   "total": 10,
 *   "size": 2,
 *   "limit": 2,
 *   "skip": 0,
 *   "page": 1,
 *   "pages": 5,
 *   "lastModified": "2018-05-06T10:19:04.910Z"
 * }
 *
 */


/* dependencies */
const path = require('path');
const _ = require('lodash');
const Router = require('@lykmapipo/express-common').Router;
const { env } = require('@codetanzania/majifix-common');


/* local constants */
const API_VERSION = env.API_VERSION;
const PATH_LIST = '/alerts';
const PATH_SINGLE = '/alerts/:id';


/* declarations */
const Alert = require(path.join(__dirname, 'alert.model'));
const router = new Router({
  version: API_VERSION
});


/**
 * @api {get} /alerts List Incident Types
 * @apiVersion 1.0.0
 * @apiName GetAlerts
 * @apiGroup Alert
 * @apiDescription Returns a list of alerts
 * @apiUse RequestHeaders
 * @apiUse Alerts
 *
 *
 * @apiUse RequestHeadersExample
 * @apiUse AlertsSuccessResponse
 * @apiUse JWTError
 * @apiUse JWTErrorExample
 * @apiUse AuthorizationHeaderError
 * @apiUse AuthorizationHeaderErrorExample
 */
router.get(PATH_LIST, function getAlerts(request, response, next) {

  //obtain request options
  const options = _.merge({}, request.mquery);

  Alert
    .get(options, function onGetAlerts(error, results) {

      //forward error
      if (error) {
        next(error);
      }

      //handle response
      else {
        response.status(200);
        response.json(results);
      }

    });

});


/**
 * @api {post} /alerts Create New Incident Type
 * @apiVersion 1.0.0
 * @apiName PostAlert
 * @apiGroup Alert
 * @apiDescription Create new alert
 * @apiUse RequestHeaders
 * @apiUse Alert
 *
 *
 * @apiUse RequestHeadersExample
 * @apiUse AlertSuccessResponse
 * @apiUse JWTError
 * @apiUse JWTErrorExample
 * @apiUse AuthorizationHeaderError
 * @apiUse AuthorizationHeaderErrorExample
 */
router
  .post(PATH_LIST, function postAlert(request, response, next) {

    //obtain request body
    const body = _.merge({}, request.body);

    Alert
      .post(body, function onPostAlert(error, created) {

        //forward error
        if (error) {
          next(error);
        }

        //handle response
        else {
          response.status(201);
          response.json(created);
        }

      });

  });


/**
 * @api {get} /alerts/:id Get Existing Incident Type
 * @apiVersion 1.0.0
 * @apiName GetAlert
 * @apiGroup Alert
 * @apiDescription Get existing alert
 * @apiUse RequestHeaders
 * @apiUse Alert
 *
 *
 * @apiUse RequestHeadersExample
 * @apiUse AlertSuccessResponse
 * @apiUse JWTError
 * @apiUse JWTErrorExample
 * @apiUse AuthorizationHeaderError
 * @apiUse AuthorizationHeaderErrorExample
 */
router
  .get(PATH_SINGLE, function getAlert(request, response, next) {

    //obtain request options
    const options = _.merge({}, request.mquery);

    //obtain alert id
    options._id = request.params.id;

    Alert
      .getById(options, function onGetAlert(error, found) {

        //forward error
        if (error) {
          next(error);
        }

        //handle response
        else {
          response.status(200);
          response.json(found);
        }

      });

  });


/**
 * @api {patch} /alerts/:id Patch Existing Incident Type
 * @apiVersion 1.0.0
 * @apiName PatchAlert
 * @apiGroup Alert
 * @apiDescription Patch existing alert
 * @apiUse RequestHeaders
 * @apiUse Alert
 *
 *
 * @apiUse RequestHeadersExample
 * @apiUse AlertSuccessResponse
 * @apiUse JWTError
 * @apiUse JWTErrorExample
 * @apiUse AuthorizationHeaderError
 * @apiUse AuthorizationHeaderErrorExample
 */
router
  .patch(PATH_SINGLE, function patchAlert(request, response, next) {

    //obtain alert id
    const { id } = request.params;

    //obtain request body
    const patches = _.merge({}, request.body);

    Alert
      .patch(id, patches, function onPatchAlert(error, patched) {

        //forward error
        if (error) {
          next(error);
        }

        //handle response
        else {
          response.status(200);
          response.json(patched);
        }

      });

  });


/**
 * @api {put} /alerts/:id Put Existing Incident Type
 * @apiVersion 1.0.0
 * @apiName PutAlert
 * @apiGroup Alert
 * @apiDescription Put existing alert
 * @apiUse RequestHeaders
 * @apiUse Alert
 *
 *
 * @apiUse RequestHeadersExample
 * @apiUse AlertSuccessResponse
 * @apiUse JWTError
 * @apiUse JWTErrorExample
 * @apiUse AuthorizationHeaderError
 * @apiUse AuthorizationHeaderErrorExample
 */
router
  .put(PATH_SINGLE, function putAlert(request, response, next) {

    //obtain alert id
    const { id } = request.params;

    //obtain request body
    const updates = _.merge({}, request.body);

    Alert
      .put(id, updates, function onPutAlert(error, updated) {

        //forward error
        if (error) {
          next(error);
        }

        //handle response
        else {
          response.status(200);
          response.json(updated);
        }

      });

  });


/**
 * @api {delete} /alerts/:id Delete Existing Incident Type
 * @apiVersion 1.0.0
 * @apiName DeleteAlert
 * @apiGroup Alert
 * @apiDescription Delete existing alert
 * @apiUse RequestHeaders
 * @apiUse Alert
 *
 *
 * @apiUse RequestHeadersExample
 * @apiUse AlertSuccessResponse
 * @apiUse JWTError
 * @apiUse JWTErrorExample
 * @apiUse AuthorizationHeaderError
 * @apiUse AuthorizationHeaderErrorExample
 */
router
  .delete(PATH_SINGLE, function deleteAlert(request, response, next) {

    //obtain alert id
    const { id } = request.params;

    Alert
      .del(id, function onDeleteAlert(error, deleted) {

        //forward error
        if (error) {
          next(error);
        }

        //handle response
        else {
          response.status(200);
          response.json(deleted);
        }

      });

  });


/* expose router */
module.exports = router;
