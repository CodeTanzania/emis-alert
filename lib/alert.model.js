'use strict';


/**
 * @module Alert
 * @name Alert
 * @alias Notification
 * @alias Warn
 * @description A representation of an entity which provides(or receives)
 * notifications to(or from) source(s).
 *
 * An alert is generated by a specific situation. The main features of an
 * alert is that it is not predictable and it is not a recurrent data. That
 * means that an alert could be an accident or a high level of pollutants
 * measure.
 *
 * @see {@link https://fiware-datamodels.readthedocs.io/en/latest/Alert/doc/spec/index.html}
 *
 * @author lally elias <lallyelias87@gmail.com>
 * @author Benson Maruchu <benmaruchu@gmail.com>
 * @license MIT
 * @since 0.1.0
 * @version 1.0.0
 * @public
 */


/* @todo expose CAP api source */
/* @todo consume CAP api sources */
/* @todo support multiple locales */
/* @todo associated risks */
/* @todo associated incident types */


/* dependencies */
const mongoose = require('mongoose');
const actions = require('mongoose-rest-actions');
const { env, schema } = require('@codetanzania/majifix-common');
const { Schema } = mongoose;


/* local constants */
const MODEL_NAME = env('ALERT_MODEL_NAME', 'Alert');
const { POPULATION_MAX_DEPTH } = schema;
const SCHEMA_OPTIONS = ({ timestamps: true, emitIndexErrors: true });
const OPTION_AUTOPOPULATE = {
  select: { title: 1, source: 1, severity: 1 },
  maxDepth: POPULATION_MAX_DEPTH
};


/* alert direction */
const DIRECTION_INBOUND = 'Inbound';
const DIRECTION_OUTBOUND = 'Outbound';
const DIRECTIONS = [DIRECTION_INBOUND, DIRECTION_OUTBOUND];


/* alert status */
const STATUS_ACTUAL = 'Actual';
const STATUS_EXERCISE = 'Exercise';
const STATUS_SYSTEM = 'System';
const STATUS_TEST = 'Test';
const STATUS_DRAFT = 'Draft';
const STATUSES = [
  STATUS_ACTUAL, STATUS_EXERCISE,
  STATUS_SYSTEM, STATUS_TEST,
  STATUS_DRAFT
];


/* alert type */
const TYPE_ALERT = 'Alert';
const TYPE_UPDATE = 'Update';
const TYPE_CANCEL = 'Cancel';
const TYPE_ASK = 'Ask';
const TYPE_ERROR = 'Error';
const TYPES = [
  TYPE_ALERT, TYPE_UPDATE,
  TYPE_CANCEL, TYPE_ASK,
  TYPE_ERROR
];


/* alert severity */
const SEVERITY_INFORMATIONAL = 'Informational';
const SEVERITY_LOW = 'Low';
const SEVERITY_MEDIUM = 'Medium';
const SEVERITY_HIGH = 'High';
const SEVERITY_CRITICAL = 'Critical';
const SEVERITIES = [
  SEVERITY_INFORMATIONAL, SEVERITY_LOW,
  SEVERITY_MEDIUM, SEVERITY_HIGH,
  SEVERITY_CRITICAL
];


/**
 * @name AlertSchema
 * @type {Schema}
 * @since 0.1.0
 * @version 1.0.0
 * @private
 */
const AlertSchema = new Schema({
  /**
   * @name sender
   * @description Human readable identifier of the sender of the alert message
   * e.g john.juma@example.com etc.
   *
   * Identifies the originator of this alert. Guaranteed by assigner to
   * be unique globally; e.g., may be based on an Internet domain name.
   *
   * @type {object}
   * @property {object} type - schema(data) type
   * @property {boolean} trim - force trimming
   * @property {boolean} required - mark required
   * @property {boolean} index - ensure database index
   * @property {boolean} searchable - allow searching
   * @property {object} fake - fake data generator options
   *
   * @since 0.1.0
   * @version 1.0.0
   * @instance
   */
  sender: {
    type: String,
    trim: true,
    required: true,
    index: true,
    searchable: true,
    fake: {
      generator: 'internet',
      type: 'email'
    }
  },


  /**
   * @name issuedAt
   * @alias sent
   * @description Date and time the alert was issued(or generated) by the alert
   * source(or generator) e.g 2018-07-28 23:53:19 etc.
   *
   * @type {object}
   * @property {string} alias - alternative name
   * @property {object} type - schema(data) type
   * @property {boolean} required - mark required
   * @property {boolean} index - ensure database index
   * @property {object} fake - fake data generator options
   *
   * @since 0.1.0
   * @version 1.0.0
   * @instance
   */
  issuedAt: {
    alias: 'sent',
    type: Date,
    required: true,
    index: true,
    fake: {
      generator: 'date',
      type: 'recent'
    }
  },


  /**
   * @name status
   * @description Human readable code denoting the appropriate handling of
   * the alert message e.g Test etc.
   *
   * @type {object}
   * @property {object} type - schema(data) type
   * @property {boolean} trim - force trimming
   * @property {boolean} required - mark required
   * @property {string[]} enum - collection of allowed values
   * @property {boolean} index - ensure database index
   * @property {boolean} searchable - allow for searching
   * @property {object} fake - fake data generator options
   *
   * @since 0.1.0
   * @version 1.0.0
   * @instance
   */
  status: {
    type: String,
    trim: true,
    required: true,
    enum: STATUSES,
    index: true,
    searchable: true,
    fake: true
  },


  /**
   * @name type
   * @description Human readable code denoting the nature of the alert message
   * e.g Test etc.
   *
   * @type {object}
   * @property {object} type - schema(data) type
   * @property {boolean} trim - force trimming
   * @property {boolean} required - mark required
   * @property {string[]} enum - collection of allowed values
   * @property {boolean} index - ensure database index
   * @property {boolean} searchable - allow for searching
   * @property {object} fake - fake data generator options
   *
   * @since 0.1.0
   * @version 1.0.0
   * @instance
   */
  type: {
    type: String,
    trim: true,
    required: true,
    enum: TYPES,
    index: true,
    searchable: true,
    fake: true
  },


  /**
   * @name title
   * @description Human readable title of the alert.
   * e.g Heavy Rain etc.
   *
   * @type {object}
   * @property {object} type - schema(data) type
   * @property {boolean} trim - force trimming
   * @property {boolean} required - mark required
   * @property {boolean} index - ensure database index
   * @property {boolean} searchable - allow searching
   * @property {object} fake - fake data generator options
   *
   * @since 0.1.0
   * @version 1.0.0
   * @instance
   */
  title: {
    type: String,
    trim: true,
    required: true,
    index: true,
    searchable: true,
    fake: {
      generator: 'lorem',
      type: 'sentence'
    }
  },


  /**
   * @name description
   * @description Brief human readable details about alert.
   *
   * @type {object}
   * @property {object} type - schema(data) type
   * @property {boolean} trim - force trimming
   * @property {boolean} index - ensure database index
   * @property {boolean} searchable - allow searching
   * @property {object} fake - fake data generator options
   *
   * @since 0.1.0
   * @version 1.0.0
   * @instance
   */
  description: {
    type: String,
    trim: true,
    index: true,
    searchable: true,
    fake: {
      generator: 'lorem',
      type: 'paragraph'
    }
  },


  /**
   * @name source
   * @description Human readable name of authority(or party)
   * issuing(or generating) the alert
   * e.g TMA etc.
   *
   * @type {object}
   * @property {object} type - schema(data) type
   * @property {boolean} trim - force trimming
   * @property {boolean} required - mark required
   * @property {boolean} index - ensure database index
   * @property {boolean} searchable - allow searching
   * @property {object} fake - fake data generator options
   *
   * @since 0.1.0
   * @version 1.0.0
   * @instance
   */
  source: {
    type: String,
    trim: true,
    required: true,
    index: true,
    searchable: true,
    fake: {
      generator: 'company',
      type: 'companyName'
    }
  },


  /**
   * @name severity
   * @description Human readable severity(level of gravity) of the alert
   * e.g Informational, Critical etc.
   *
   * @type {object}
   * @property {object} type - schema(data) type
   * @property {boolean} trim - force trimming
   * @property {boolean} required - mark required
   * @property {string[]} enum - collection of allowed values
   * @property {boolean} index - ensure database index
   * @property {boolean} searchable - allow for searching
   * @property {object} fake - fake data generator options
   *
   * @since 0.1.0
   * @version 1.0.0
   * @instance
   */
  severity: {
    type: String,
    trim: true,
    required: true,
    enum: SEVERITIES,
    default: SEVERITY_INFORMATIONAL,
    index: true,
    searchable: true,
    fake: true
  },


  /**
   * @name direction
   * @description Human readable direction(received or given) of the alert
   * i.e Inbound or Outbound.
   *
   * @type {object}
   * @property {object} type - schema(data) type
   * @property {boolean} trim - force trimming
   * @property {boolean} required - mark required
   * @property {string[]} enum - collection of allowed values
   * @property {boolean} index - ensure database index
   * @property {boolean} searchable - allow for searching
   * @property {object} fake - fake data generator options
   *
   * @since 0.1.0
   * @version 1.0.0
   * @instance
   */
  direction: {
    type: String,
    trim: true,
    required: true,
    enum: DIRECTIONS,
    default: DIRECTION_INBOUND,
    index: true,
    searchable: true,
    fake: true
  }

}, SCHEMA_OPTIONS);


/*
 *------------------------------------------------------------------------------
 * Hook
 *------------------------------------------------------------------------------
 */


AlertSchema.pre('validate', function (next) {

  if (!this.issuedAt) {
    this.date = new Date();
  }

  return next();

});


/*
 *------------------------------------------------------------------------------
 * Instance
 *------------------------------------------------------------------------------
 */


/**
 * @name beforeDelete
 * @function beforeDelete
 * @description pre delete alert logics
 * @param {function} done callback to invoke on success or error
 * @author lally elias <lallyelias87@gmail.com>
 * @since 0.1.0
 * @version 1.0.0
 * @instance
 */
AlertSchema.methods.beforeDelete = function beforeDelete(done) {
  return done();
};


/**
 * @name beforePost
 * @function beforePost
 * @description pre save alert logics
 * @param {function} done callback to invoke on success or error
 * @author lally elias <lallyelias87@gmail.com>
 * @since 0.1.0
 * @version 1.0.0
 * @instance
 */
AlertSchema.methods.beforePost = function beforePost(done) {
  return done();
};


/**
 * @name afterPost
 * @function afterPost
 * @alias afterSave
 * @description post save alert logics
 * @param {function} done callback to invoke on success or error
 * @author lally elias <lallyelias87@gmail.com>
 * @since 0.1.0
 * @version 1.0.0
 * @instance
 */
AlertSchema.methods.afterPost = function afterPost(done) {
  return done();
};


/*
 *------------------------------------------------------------------------------
 * Statics
 *------------------------------------------------------------------------------
 */


/* expose static constants */
AlertSchema.statics.MODEL_NAME = MODEL_NAME;
AlertSchema.statics.OPTION_AUTOPOPULATE = OPTION_AUTOPOPULATE;

AlertSchema.statics.STATUS_ACTUAL = STATUS_ACTUAL;
AlertSchema.statics.STATUS_EXERCISE = STATUS_EXERCISE;
AlertSchema.statics.STATUS_SYSTEM = STATUS_SYSTEM;
AlertSchema.statics.STATUS_TEST = STATUS_TEST;
AlertSchema.statics.STATUS_DRAFT = STATUS_DRAFT;
AlertSchema.statics.STATUSES = STATUSES;

AlertSchema.statics.TYPE_ALERT = TYPE_ALERT;
AlertSchema.statics.TYPE_ASK = TYPE_ASK;
AlertSchema.statics.TYPE_CANCEL = TYPE_CANCEL;
AlertSchema.statics.TYPE_ERROR = TYPE_ERROR;
AlertSchema.statics.TYPE_UPDATE = TYPE_UPDATE;
AlertSchema.statics.TYPES = TYPES;

AlertSchema.statics.SEVERITY_INFORMATIONAL = SEVERITY_INFORMATIONAL;
AlertSchema.statics.SEVERITY_LOW = SEVERITY_LOW;
AlertSchema.statics.SEVERITY_MEDIUM = SEVERITY_MEDIUM;
AlertSchema.statics.SEVERITY_HIGH = SEVERITY_HIGH;
AlertSchema.statics.SEVERITY_CRITICAL = SEVERITY_CRITICAL;
AlertSchema.statics.SEVERITIES = SEVERITIES;

AlertSchema.statics.DIRECTION_INBOUND = DIRECTION_INBOUND;
AlertSchema.statics.DIRECTION_OUTBOUND = DIRECTION_OUTBOUND;
AlertSchema.statics.DIRECTIONS = DIRECTIONS;

/*
 *------------------------------------------------------------------------------
 * Plugins
 *------------------------------------------------------------------------------
 */


/* use mongoose rest actions*/
AlertSchema.plugin(actions);


/* export incident type model */
exports = module.exports = mongoose.model(MODEL_NAME, AlertSchema);
