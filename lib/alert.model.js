'use strict';


/**
 * @module Alert
 * @name Alert
 * @alias Notification
 * @alias Warn
 * @description A representation of an entity which provides(or receives)
 * notifications to(or from) source(s).
 *
 * An alert is generated by a specific situation. The main features of an
 * alert is that it is not predictable and it is not a recurrent data. That
 * means that an alert could be an accident or a high level of pollutants
 * measure.
 *
 * @see {@link http://docs.oasis-open.org/emergency/cap/v1.2/CAP-v1.2-os.html}
 * @see {@link https://developers.google.com/public-alerts/reference/cap-google}
 *
 * @author lally elias <lallyelias87@gmail.com>
 * @author Benson Maruchu <benmaruchu@gmail.com>
 * @license MIT
 * @since 0.1.0
 * @version 1.0.0
 * @public
 */


/* @todo implement alert code generator(YYYYMM-XXXX(incremented)) */
/* @todo implement alert glide number generator */
/* @todo expose CAP api source */
/* @todo consume CAP api sources */
/* @todo support multiple locales */
/* @todo support multiple locales templates */
/* @todo associated risks */
/* @todo associated incident types */
/* @todo sender|source(name, email, phone, address) */


/* dependencies */
const path = require('path');
const _ = require('lodash');
const mongoose = require('mongoose');
const actions = require('mongoose-rest-actions');
const { env, schema } = require('@codetanzania/majifix-common');
const { Schema } = mongoose;


/* local constants */
const MODEL_NAME = env('ALERT_MODEL_NAME', 'Alert');
const { POPULATION_MAX_DEPTH } = schema;
const SCHEMA_OPTIONS = ({ timestamps: true, emitIndexErrors: true });
const OPTION_AUTOPOPULATE = {
  select: { title: 1, source: 1, severity: 1 },
  maxDepth: POPULATION_MAX_DEPTH
};


/* alert properties */
const rootProps = require(path.join(__dirname, 'alert.model.root.properties'));
const infoProps = require(path.join(__dirname, 'alert.model.info.properties'));
const properties = _.merge({}, rootProps.properties, infoProps.properties);


/**
 * @name AlertSchema
 * @type {Schema}
 * @since 0.1.0
 * @version 1.0.0
 * @private
 */
const AlertSchema = new Schema(properties, SCHEMA_OPTIONS);


/*
 *------------------------------------------------------------------------------
 * Hook
 *------------------------------------------------------------------------------
 */


AlertSchema.pre('validate', function (next) {

  if (!_.isEmpty(this.addresses)) {
    this.addresses = [].concat(this.addresses);
  }

  if (!this.issuedAt) {
    this.date = new Date();
  }

  return next();

});


/*
 *------------------------------------------------------------------------------
 * Instance
 *------------------------------------------------------------------------------
 */


/**
 * @name beforeDelete
 * @function beforeDelete
 * @description pre delete alert logics
 * @param {function} done callback to invoke on success or error
 * @author lally elias <lallyelias87@gmail.com>
 * @since 0.1.0
 * @version 1.0.0
 * @instance
 */
AlertSchema.methods.beforeDelete = function beforeDelete(done) {
  return done();
};


/**
 * @name beforePost
 * @function beforePost
 * @description pre save alert logics
 * @param {function} done callback to invoke on success or error
 * @author lally elias <lallyelias87@gmail.com>
 * @since 0.1.0
 * @version 1.0.0
 * @instance
 */
AlertSchema.methods.beforePost = function beforePost(done) {
  return done();
};


/**
 * @name afterPost
 * @function afterPost
 * @alias afterSave
 * @description post save alert logics
 * @param {function} done callback to invoke on success or error
 * @author lally elias <lallyelias87@gmail.com>
 * @since 0.1.0
 * @version 1.0.0
 * @instance
 */
AlertSchema.methods.afterPost = function afterPost(done) {
  return done();
};


/*
 *------------------------------------------------------------------------------
 * Statics
 *------------------------------------------------------------------------------
 */


/* expose static constants */
AlertSchema.statics.MODEL_NAME = MODEL_NAME;
AlertSchema.statics.OPTION_AUTOPOPULATE = OPTION_AUTOPOPULATE;

// AlertSchema.statics.STATUS_ACTUAL = STATUS_ACTUAL;
// AlertSchema.statics.STATUS_EXERCISE = STATUS_EXERCISE;
// AlertSchema.statics.STATUS_SYSTEM = STATUS_SYSTEM;
// AlertSchema.statics.STATUS_TEST = STATUS_TEST;
// AlertSchema.statics.STATUS_DRAFT = STATUS_DRAFT;
// AlertSchema.statics.STATUSES = STATUSES;

// AlertSchema.statics.TYPE_ALERT = TYPE_ALERT;
// AlertSchema.statics.TYPE_ASK = TYPE_ASK;
// AlertSchema.statics.TYPE_CANCEL = TYPE_CANCEL;
// AlertSchema.statics.TYPE_ERROR = TYPE_ERROR;
// AlertSchema.statics.TYPE_UPDATE = TYPE_UPDATE;
// AlertSchema.statics.TYPES = TYPES;

// AlertSchema.statics.SCOPE_PUBLIC = SCOPE_PUBLIC;
// AlertSchema.statics.SCOPE_RESTRICTED = SCOPE_RESTRICTED;
// AlertSchema.statics.SCOPE_PRIVATE = SCOPE_PRIVATE;
// AlertSchema.statics.SCOPES = SCOPES;

// AlertSchema.statics.DIRECTION_INBOUND = DIRECTION_INBOUND;
// AlertSchema.statics.DIRECTION_OUTBOUND = DIRECTION_OUTBOUND;
// AlertSchema.statics.DIRECTIONS = DIRECTIONS;

/*
 *------------------------------------------------------------------------------
 * Plugins
 *------------------------------------------------------------------------------
 */


/* use mongoose rest actions*/
AlertSchema.plugin(actions);


/* export incident type model */
exports = module.exports = mongoose.model(MODEL_NAME, AlertSchema);
